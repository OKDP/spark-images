name: Patch and Pombump
description: Apply patches and update POM files using pombump
inputs:
  image:
    description: Image name
    required: true
  spark_version:
    description: Spark version
    required: true
  java_version:
    description: Java version
    required: true
  python_version:
    description: Python version
    required: true
  hadoop_version:
    description: Hadoop version
    required: true

runs:
  using: composite
  steps:
    - name: Prepare patch variables
      id: patch_vars
      run: |
        set -x
        MINOR=$(echo "${{ inputs.spark_version }}" | awk -F. '{print $1"."$2}')
        PATCH_DIR="./${{ inputs.image }}/spark-${MINOR}"
        POM_PROPS="${PATCH_DIR}/pombump-properties.yaml"
        POM_DEPS="${PATCH_DIR}/pombump-deps.yaml"
        POM_DIR="./${{ inputs.image }}"
        echo "minor=$MINOR" >> $GITHUB_OUTPUT
        echo "patch_dir=$PATCH_DIR" >> $GITHUB_OUTPUT
        echo "pom_props=$POM_PROPS" >> $GITHUB_OUTPUT
        echo "pom_deps=$POM_DEPS" >> $GITHUB_OUTPUT
        echo "pom_dir=$POM_DIR" >> $GITHUB_OUTPUT
      shell: bash

    - name: Read patch
      id: read_patch
      run: |
        set -x        
        yq -o=json '.controls[]' .build/pre-build-patch.yml > controls.json
        MATCH=$(jq -c \
          --arg spark_version "${{ inputs.spark_version }}" \
          --arg python_version "${{ inputs.python_version }}" \
          --arg java_version "${{ inputs.java_version }}" \
          --arg hadoop_version "${{ inputs.hadoop_version }}" \
          'select(.spark_version == $spark_version and .python_version == $python_version and .java_version == $java_version and .hadoop_version == $hadoop_version)' controls.json)
        if [ -z "$MATCH" ]; then
          echo "patch_files=" >> $GITHUB_OUTPUT
          echo "pom_files=" >> $GITHUB_OUTPUT
        else
          echo "patch_files=$(echo $MATCH | jq -r '.patch_files | join(",")')" >> $GITHUB_OUTPUT
          echo "pom_files=$(echo $MATCH | jq -r '.pom_files | join(",")')" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Apply patch
      id: apply_patch      
      if: steps.read_patch.outputs.patch_files != ''
      run: |
        set -x        
        for patch in $(echo "${{ steps.read_patch.outputs.patch_files }}" | tr ',' '\n'); do
          PATCH_PATH="${{ steps.patch_vars.outputs.patch_dir }}/$patch"
          if [[ -f "$PATCH_PATH" ]]; then
            echo "Applying patch $patch"
            patch -p1 -i "$PATCH_PATH"
          fi
        done
      shell: bash

    - name: Install and Run pombump
      if: steps.read_patch.outputs.patch_files != ''
      run: |
        set -x
        export PATH="$HOME/bin:$PATH"

        # Get latest tag
        LATEST_TAG=$(git ls-remote --tags https://github.com/chainguard-dev/pombump.git | awk -F/ '{print $3}' | grep '^v' | sort -V | tail -n1)

        # Clone and build pombump
        git clone --depth 1 --branch "$LATEST_TAG" https://github.com/chainguard-dev/pombump.git /tmp/pombump
        cd /tmp/pombump
        go build -o "$HOME/bin/pombump"
        chmod +x "$HOME/bin/pombump"

        echo "Applying pombump for Spark minor version ${{ steps.patch_vars.outputs.minor }}"
        cd "${{ github.workspace }}"

        # Only use pom_files from pre-build-patch.yml, do nothing if empty
        if [ -n "${{ steps.read_patch.outputs.pom_files }}" ]; then
          echo "${{ steps.read_patch.outputs.pom_files }}" | tr ',' '\n' | while read pom; do
            POM_PATH=$(find "${{ steps.patch_vars.outputs.pom_dir }}" -name "$pom" -type f | head -n1)
            if [ -n "$POM_PATH" ]; then
              echo "Running pombump on $POM_PATH"
              pombump "$POM_PATH" \
                --properties-file "${{ steps.patch_vars.outputs.pom_props }}" \
                --patch-file "${{ steps.patch_vars.outputs.pom_deps }}"
            else
              echo "POM file $pom not found!"
            fi
          done
        else
          echo "No pom_files provided in pre-build-patch.yml, skipping pombump."
        fi
      shell: bash

