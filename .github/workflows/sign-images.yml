# 
#
# Copyright 2024 tosit.io
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Sign Images with Cosign

on:
  workflow_run:
    workflows: ["ci"]
    types:
      - completed
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  packages: write
  contents: read

jobs:
  get-ci-versions:
    runs-on: "ubuntu-latest"
    outputs:
      matrix: ${{ steps.ci-versions.outputs.matrix }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        
      - name: Get CI versions matrix
        id: ci-versions
        uses: ./.github/actions/spark-version-matrix
        with:
          use_matrix: ".build/ci-versions.yml"

  sign-images:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    needs: [get-ci-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.get-ci-versions.outputs.matrix) }}
        image: [spark-base, spark, spark-py, spark-r]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up CI registry
        id: registry-repos
        run: |
          echo "ci_repo=ghcr.io/${GITHUB_REPOSITORY_OWNER@L}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Generate image tags
        id: image-tags
        uses: ./.github/actions/spark-image-tag
        with:
          image: ${{ matrix.image }}
          spark_version: ${{ matrix.version.spark_version }}
          scala_version: ${{ matrix.version.scala_version }}
          java_version: ${{ matrix.version.java_version }}
          python_version: ${{ matrix.version.python_version }}
          ci_repo: ${{ steps.registry-repos.outputs.ci_repo }}
          publish_to_registry: "false"

      - name: Login to CI registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install tools
        run: |
          # Install syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Install cosign
          wget -q https://github.com/sigstore/cosign/releases/download/v2.1.1/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          
          # Install jq for JSON validation
          sudo apt-get update && sudo apt-get install -y jq

      - name: Generate cosign keypair
        run: cosign generate-key-pair
        
      - name: Verify cosign keypair
        run: |
          echo "Verifying cosign keypair..."
          
          # Check if key files exist
          if [ ! -f "cosign.key" ] || [ ! -f "cosign.pub" ]; then
            echo "❌ Cosign key files not found!"
            exit 1
          fi
          
          # Check private key format (should be PEM)
          if ! grep -q "BEGIN ENCRYPTED COSIGN PRIVATE KEY" cosign.key; then
            echo "❌ Private key file is not in expected format!"
            exit 1
          fi
          
          # Check public key format
          if ! grep -q "BEGIN PUBLIC KEY" cosign.pub; then
            echo "❌ Public key file is not in expected format!"
            exit 1
          fi
          
          echo "✅ Cosign keypair verified successfully"

      - name: Pull and generate SBOM
        run: |
          # Pull image
          IMAGE_URL="${{ steps.registry-repos.outputs.ci_repo }}/${{ matrix.image }}:${{ steps.image-tags.outputs.latest_tag }}"
          echo "Pulling image: ${IMAGE_URL}"
          docker pull ${IMAGE_URL}
          
          # Generate SBOM
          echo "Generating SBOM..."
          SBOM_FILE="${{ matrix.image }}-${{ steps.image-tags.outputs.latest_tag }}.sbom.json"
          syft ${IMAGE_URL} -o spdx-json > ${SBOM_FILE}
          echo "SBOM generated: ${SBOM_FILE}"

      - name: Verify SBOM
        run: |
          SBOM_FILE="${{ matrix.image }}-${{ steps.image-tags.outputs.latest_tag }}.sbom.json"
          echo "Verifying SBOM for ${{ matrix.image }}:${{ steps.image-tags.outputs.latest_tag }}"
          
          # Check if file exists
          if [ ! -f "${SBOM_FILE}" ]; then
            echo "❌ SBOM file not found!"
            exit 1
          fi
          
          # Check file size (should be non-zero)
          FILE_SIZE=$(stat -c%s "${SBOM_FILE}")
          echo "SBOM file size: $(du -h ${SBOM_FILE} | cut -f1)"
          if [ "$FILE_SIZE" -eq 0 ]; then
            echo "❌ SBOM file is empty!"
            exit 1
          fi
          
          # Validate JSON format
          if ! jq empty "${SBOM_FILE}"; then
            echo "❌ SBOM is not valid JSON!"
            exit 1
          fi
          
          # Check for SPDX format indicators
          if ! grep -q "SPDX" "${SBOM_FILE}"; then
            echo "⚠️ SBOM may not be in SPDX format!"
          fi
          
          # Count packages (a valid SBOM should have packages)
          PACKAGE_COUNT=$(jq '.packages | length' "${SBOM_FILE}" 2>/dev/null || echo "0")
          echo "Package count: $PACKAGE_COUNT"
          if [ "$PACKAGE_COUNT" -eq 0 ]; then
            echo "⚠️ No packages found in SBOM!"
          else
            echo "✅ Found $PACKAGE_COUNT packages in SBOM"
          fi
          
          # Print some sample package information
          echo "Sample packages:"
          jq '.packages[0:3]' "${SBOM_FILE}" 2>/dev/null || echo "Could not extract package info"
          
          echo "✅ SBOM verification completed"

      - name: Sign image
        run: |
          IMAGE_URL="${{ steps.registry-repos.outputs.ci_repo }}/${{ matrix.image }}:${{ steps.image-tags.outputs.latest_tag }}"
          export COSIGN_EXPERIMENTAL=1
          echo "Signing image: ${IMAGE_URL}"
          cosign sign --yes --key cosign.key ${IMAGE_URL}
          echo "✅ Image signed successfully"

      - name: Verify image signature
        run: |
          IMAGE_URL="${{ steps.registry-repos.outputs.ci_repo }}/${{ matrix.image }}:${{ steps.image-tags.outputs.latest_tag }}"
          echo "Verifying signature for: ${IMAGE_URL}"
          if cosign verify --key cosign.pub ${IMAGE_URL}; then
            echo "✅ Image signature verified successfully"
          else
            echo "❌ Image signature verification failed"
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signing-artifacts-${{ matrix.image }}-${{ matrix.version.spark_version }}
          path: |
            *.sbom.json
            cosign.key
            cosign.pub
          retention-days: 30
